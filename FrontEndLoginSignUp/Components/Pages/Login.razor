@page "/login"
@using System.Net.Http.Headers
@using ClassLibraryModel
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using System.Security.Claims
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@using Blazored.SessionStorage
@inject ISessionStorageService SessionStorage

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
    <a href="/register">If you don't have an account, Register!</a>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
            <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</EditForm>

@code {
    private HttpClient? client;
    private HttpResponseMessage? response;
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = string.Empty;
    private string? Token;

    private async Task HandleLogin()
    {
        try
        {
            client = HttpClientFactory.CreateClient("AuthApi");
            response = await client.PostAsJsonAsync("api/Auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var jwtResponse = await response.Content.ReadFromJsonAsync<JwtResponse>();
                Token = jwtResponse.Token;
                await SessionStorage.SetItemAsync("authToken", Token);
                NavigateBasedOnRole(jwtResponse.Token);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Login failed: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void NavigateBasedOnRole(string token)
    {
        var claims = ParseClaimsFromJwt(token);
        var roleClaim = claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
        if (roleClaim != null)
        {
            if (roleClaim.Value == "Admin")
            {
                Navigation.NavigateTo("/branch");
            }
            else if (roleClaim.Value == "User")
            {
                Navigation.NavigateTo("/counter");
            }
        }
    }

    private IEnumerable<Claim> ParseClaimsFromJwt(string jwt)
    {
        var payload = jwt.Split('.')[1];
        var jsonBytes = ParseBase64WithoutPadding(payload);
        var keyValuePairs = JsonSerializer.Deserialize<Dictionary<string, object>>(jsonBytes);
        return keyValuePairs.Select(kvp => new Claim(kvp.Key, kvp.Value.ToString()));
    }

    private byte[] ParseBase64WithoutPadding(string base64)
    {
        switch (base64.Length % 4)
        {
            case 2: base64 += "=="; break;
            case 3: base64 += "="; break;
        }
        return Convert.FromBase64String(base64);
    }

    public class JwtResponse
    {
        public string Token { get; set; }
    }
}
