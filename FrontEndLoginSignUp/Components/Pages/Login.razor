@page "/login"
@using System.Net.Http.Headers
@using ClassLibraryModel
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using System.Security.Claims
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    public HttpClient? client { get; set; }
    public HttpResponseMessage? response { get; set; }
    private LoginModel loginModel = new LoginModel();

    private async Task HandleLogin()
    {
        client = HttpClientFactory.CreateClient("AuthApi");
        response = await client.PostAsJsonAsync("api/Auth/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var jwtResponse = await response.Content.ReadFromJsonAsync<JwtResponse>();
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(jwtResponse.Token);

            // Navigate based on the user's role
            NavigateBasedOnRole(jwtResponse.Token);
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {error}");
        }
    }

    private void NavigateBasedOnRole(string token)
    {
        var claims = ParseClaimsFromJwt(token);
        var roleClaim = claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
        if (roleClaim != null)
        {
            if (roleClaim.Value == "Admin")
            {
                Navigation.NavigateTo("/weather");
            }
            else if (roleClaim.Value == "User")
            {
                Navigation.NavigateTo("/counter");
            }
        }
    }

    private IEnumerable<Claim> ParseClaimsFromJwt(string jwt)
    {
        var payload = jwt.Split('.')[1];
        var jsonBytes = ParseBase64WithoutPadding(payload);
        var keyValuePairs = JsonSerializer.Deserialize<Dictionary<string, object>>(jsonBytes);
        return keyValuePairs.Select(kvp => new Claim(kvp.Key, kvp.Value.ToString()));
    }

    private byte[] ParseBase64WithoutPadding(string base64)
    {
        switch (base64.Length % 4)
        {
            case 2: base64 += "=="; break;
            case 3: base64 += "="; break;
        }
        return Convert.FromBase64String(base64);
    }

    public class JwtResponse
    {
        public string Token { get; set; }
    }
}

<style>
    body {
        font-family: 'Georgia', serif;
        background-color: #e0f2f1; /* Soft mint green */
        color: #263238; /* Dark grey-blue */
    }

    h3 {
        text-align: center;
        margin-bottom: 30px;
        color: #004d40; /* Deep teal */
    }

    .form-group {
        margin-bottom: 20px;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
    }

    label {
        display: block;
        font-weight: bold;
        margin-bottom: 8px;
        color: #004d40; /* Deep teal */
    }

    .form-control {
        width: 100%;
        padding: 12px;
        border: 1px solid #004d40; /* Deep teal border */
        border-radius: 6px;
        background-color: #ffffff; /* White */
        color: #263238; /* Dark grey-blue */
    }

    .btn-primary {
        display: block;
        width: auto; /* Adjust width to fit content */
        max-width: 200px; /* Set a max width */
        padding: 12px 20px;
        background-color: #00796b; /* Teal */
        border: none;
        border-radius: 6px;
        color: #ffffff;
        cursor: pointer;
        font-size: 16px;
        margin: 0 auto; /* Center button horizontally */
    }

    .btn-primary:hover {
        background-color: #004d40; /* Darker teal */
    }
</style>
